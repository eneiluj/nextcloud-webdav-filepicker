{"version":3,"sources":["../lib/filepicker.ts"],"names":["FilePickerType","FilePicker","title","multiSelect","mimeTypeFilter","modal","type","directoriesAllowed","path","mimeTypeFiler","Promise","res","rej","OC","dialogs","filepicker","allowDirectoryChooser","FilePickerBuilder","Choose","ms","filter","push","allow","getFilePickerBuilder"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;IAIYA,c;;;WAAAA,c;AAAAA,EAAAA,c,CAAAA,c;AAAAA,EAAAA,c,CAAAA,c;AAAAA,EAAAA,c,CAAAA,c;AAAAA,EAAAA,c,CAAAA,c;GAAAA,c,8BAAAA,c;;IAOCC,U;AAST,sBAAmBC,KAAnB,EACIC,WADJ,EAEIC,cAFJ,EAGIC,KAHJ,EAIIC,IAJJ,EAKIC,kBALJ,EAMIC,IANJ,EAMmB;AAAA;;AACf,SAAKN,KAAL,GAAaA,KAAb;AACA,SAAKC,WAAL,GAAmBA,WAAnB;AACA,SAAKM,aAAL,GAAqBL,cAArB;AACA,SAAKC,KAAL,GAAaA,KAAb;AACA,SAAKC,IAAL,GAAYA,IAAZ;AACA,SAAKC,kBAAL,GAA0BA,kBAA1B;AACA,SAAKC,IAAL,GAAYA,IAAZ;AACH;;;;2BAE8B;AAAA;;AAC3B,aAAO,IAAIE,OAAJ,CAAY,UAACC,GAAD,EAAMC,GAAN,EAAc;AAC7BC,QAAAA,EAAE,CAACC,OAAH,CAAWC,UAAX,CACI,KAAI,CAACb,KADT,EAEIS,GAFJ,EAGI,KAAI,CAACR,WAHT,EAII,KAAI,CAACM,aAJT,EAKI,KAAI,CAACJ,KALT,EAMI,KAAI,CAACC,IANT,EAOI,KAAI,CAACE,IAPT,EAQI;AACIQ,UAAAA,qBAAqB,EAAE,KAAI,CAACT;AADhC,SARJ;AAYH,OAbM,CAAP;AAcH;;;;;;;;IAGQU,iB;AAST,6BAAmBf,KAAnB,EAAkC;AAAA;;AAAA,SAP1BC,WAO0B,GAPH,KAOG;AAAA,SAN1BM,aAM0B,GANA,EAMA;AAAA,SAL1BJ,KAK0B,GALT,IAKS;AAAA,SAJ1BC,IAI0B,GAJHN,cAAc,CAACkB,MAIZ;AAAA,SAH1BX,kBAG0B,GAHI,KAGJ;AAC9B,SAAKL,KAAL,GAAaA,KAAb;AACH;;;;mCAEqBiB,E,EAAgC;AAClD,WAAKhB,WAAL,GAAmBgB,EAAnB;AACA,aAAO,IAAP;AACH;;;sCAEwBC,M,EAAmC;AACxD,WAAKX,aAAL,CAAmBY,IAAnB,CAAwBD,MAAxB;AACA,aAAO,IAAP;AACH;;;sCAEwBA,M,EAAqC;AAC1D,WAAKX,aAAL,GAAqBW,MAArB;AACA,aAAO,IAAP;AACH;;;6BAEef,K,EAAmC;AAC/C,WAAKA,KAAL,GAAaA,KAAb;AACA,aAAO,IAAP;AACH;;;4BAEcC,I,EAAyC;AACpD,WAAKA,IAAL,GAAYA,IAAZ;AACA,aAAO,IAAP;AACH;;;uCAEiE;AAAA,UAA1CgB,KAA0C,uEAAzB,IAAyB;AAC9D,WAAKf,kBAAL,GAA0Be,KAA1B;AACA,aAAO,IAAP;AACH;;;4BAEcd,I,EAAiC;AAC5C,WAAKA,IAAL,GAAYA,IAAZ;AACA,aAAO,IAAP;AACH;;;4BAE0B;AACvB,aAAO,IAAIP,UAAJ,CACH,KAAKC,KADF,EAEH,KAAKC,WAFF,EAGH,KAAKM,aAHF,EAIH,KAAKJ,KAJF,EAKH,KAAKC,IALF,EAMH,KAAKC,kBANF,EAOH,KAAKC,IAPF,CAAP;AASH;;;;;;;;AAIE,SAASe,oBAAT,CAA8BrB,KAA9B,EAAgE;AACnE,SAAO,IAAIe,iBAAJ,CAAsBf,KAAtB,CAAP;AACH","sourcesContent":["/// <reference types=\"@nextcloud/typings\" />\n\ndeclare var OC: Nextcloud.v16.OC | Nextcloud.v17.OC | Nextcloud.v18.OC | Nextcloud.v19.OC;\n\nexport enum FilePickerType {\n    Choose = 1,\n    Move = 2,\n    Copy = 3,\n    CopyMove = 4,\n}\n\nexport class FilePicker {\n    private title: string\n    private multiSelect: boolean\n    private mimeTypeFiler: string[]\n    private modal: boolean\n    private type: FilePickerType\n    private directoriesAllowed: boolean\n    private path?: string\n\n    public constructor(title: string,\n        multiSelect: boolean,\n        mimeTypeFilter: string[],\n        modal: boolean,\n        type: FilePickerType,\n        directoriesAllowed: boolean,\n        path?: string) {\n        this.title = title\n        this.multiSelect = multiSelect\n        this.mimeTypeFiler = mimeTypeFilter\n        this.modal = modal\n        this.type = type\n        this.directoriesAllowed = directoriesAllowed\n        this.path = path\n    }\n\n    public pick(): Promise<string> {\n        return new Promise((res, rej) => {\n            OC.dialogs.filepicker(\n                this.title,\n                res,\n                this.multiSelect,\n                this.mimeTypeFiler,\n                this.modal,\n                this.type,\n                this.path,\n                {\n                    allowDirectoryChooser: this.directoriesAllowed\n                }\n            )\n        })\n    }\n}\n\nexport class FilePickerBuilder {\n    private title: string\n    private multiSelect: boolean = false\n    private mimeTypeFiler: string[] = []\n    private modal: boolean = true\n    private type: FilePickerType = FilePickerType.Choose\n    private directoriesAllowed: boolean = false\n    private path?: string\n\n    public constructor(title: string) {\n        this.title = title\n    }\n\n    public setMultiSelect(ms: boolean): FilePickerBuilder {\n        this.multiSelect = ms\n        return this\n    }\n\n    public addMimeTypeFilter(filter: string): FilePickerBuilder {\n        this.mimeTypeFiler.push(filter)\n        return this\n    }\n\n    public setMimeTypeFilter(filter: string[]): FilePickerBuilder {\n        this.mimeTypeFiler = filter\n        return this\n    }\n\n    public setModal(modal: boolean): FilePickerBuilder {\n        this.modal = modal\n        return this\n    }\n\n    public setType(type: FilePickerType): FilePickerBuilder {\n        this.type = type\n        return this\n    }\n\n    public allowDirectories(allow: boolean = true): FilePickerBuilder {\n        this.directoriesAllowed = allow\n        return this\n    }\n\n    public startAt(path: string): FilePickerBuilder {\n        this.path = path\n        return this\n    }\n\n    public build(): FilePicker {\n        return new FilePicker(\n            this.title,\n            this.multiSelect,\n            this.mimeTypeFiler,\n            this.modal,\n            this.type,\n            this.directoriesAllowed,\n            this.path\n        )\n    }\n\n}\n\nexport function getFilePickerBuilder(title: string): FilePickerBuilder {\n    return new FilePickerBuilder(title)\n}\n"],"file":"filepicker.js"}