{"version":3,"sources":["../lib/toast.ts"],"names":["ToastType","ERROR","WARNING","INFO","SUCCESS","PERMANENT","showMessage","text","options","Object","assign","timeout","isHTML","type","undefined","selector","onRemove","onClick","close","element","document","createElement","innerHTML","innerText","classes","toast","duration","callback","gravity","position","backgroundColor","className","showToast","showError","showWarning","showInfo","showSuccess"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;;;;;;;IAEMA,S;;;;AAAAA,S,CACWC,K,GAAQ,a;AADnBD,S,CAEWE,O,GAAU,e;AAFrBF,S,CAGWG,I,GAAO,Y;AAHlBH,S,CAIWI,O,GAAU,e;AAJrBJ,S,CAKWK,S,GAAY,a;;AAyC7B;;;;;;AAMO,SAASC,WAAT,CAAqBC,IAArB,EAAmCC,OAAnC,EAAkE;AAAA;;AACxEA,EAAAA,OAAO,GAAGC,MAAM,CAACC,MAAP,CAAc;AACvBC,IAAAA,OAAO,EAAE,CADc;AAEvBC,IAAAA,MAAM,EAAE,KAFe;AAGvBC,IAAAA,IAAI,EAAEC,SAHiB;AAIvB;AACAC,IAAAA,QAAQ,EAAED,SALa;AAMvBE,IAAAA,QAAQ,EAAE,oBAAM,CAAG,CANI;AAOvBC,IAAAA,OAAO,EAAE,mBAAM,CAAG,CAPK;AAQvBC,IAAAA,KAAK,EAAE;AARgB,GAAd,EASPV,OATO,CAAV;;AAUA,MAAI,CAACA,OAAO,CAACI,MAAb,EAAqB;AACpB;AACA,QAAMO,OAAO,GAAGC,QAAQ,CAACC,aAAT,CAAuB,KAAvB,CAAhB;AACAF,IAAAA,OAAO,CAACG,SAAR,GAAoBf,IAApB;AACAA,IAAAA,IAAI,GAAGY,OAAO,CAACI,SAAf;AACA;;AACD,MAAIC,OAAO,oBAAGhB,OAAO,CAACK,IAAX,yDAAmB,EAA9B;AAEA,MAAMY,KAAK,GAAG,yBAAS;AACtBlB,IAAAA,IAAI,EAAEA,IADgB;AAEtBmB,IAAAA,QAAQ,EAAGlB,OAAO,CAACG,OAAR,KAAoB,IAApB,IAA4BH,OAAO,CAACG,OAAR,KAAoBG,SAAjD,GAA8D,IAA9D,GAAqEN,OAAO,CAACG,OAAR,GAAkB,IAF3E;AAGtBgB,IAAAA,QAAQ,EAAEnB,OAAO,CAACQ,QAHI;AAItBC,IAAAA,OAAO,EAAET,OAAO,CAACS,OAJK;AAKtBC,IAAAA,KAAK,EAAEV,OAAO,CAACU,KALO;AAMtBU,IAAAA,OAAO,EAAE,KANa;AAOtBb,IAAAA,QAAQ,EAAEP,OAAO,CAACO,QAPI;AAQtBc,IAAAA,QAAQ,EAAE,OARY;AAStBC,IAAAA,eAAe,EAAE,EATK;AAUtBC,IAAAA,SAAS,EAAE,WAAWP;AAVA,GAAT,CAAd;AAYAC,EAAAA,KAAK,CAACO,SAAN;AACA,SAAOP,KAAP;AACA;AAED;;;;;;;;AAMO,SAASQ,SAAT,CAAmB1B,IAAnB,EAAiCC,OAAjC,EAAgE;AACtE,SAAOF,WAAW,CAACC,IAAD,kCAAYC,OAAZ;AAAqBK,IAAAA,IAAI,EAAEb,SAAS,CAACC;AAArC,KAAlB;AACA;AAED;;;;;;;;AAMO,SAASiC,WAAT,CAAqB3B,IAArB,EAAmCC,OAAnC,EAAkE;AACxE,SAAOF,WAAW,CAACC,IAAD,kCAAYC,OAAZ;AAAqBK,IAAAA,IAAI,EAAEb,SAAS,CAACE;AAArC,KAAlB;AACA;AAED;;;;;;;;AAMO,SAASiC,QAAT,CAAkB5B,IAAlB,EAAgCC,OAAhC,EAA+D;AACrE,SAAOF,WAAW,CAACC,IAAD,kCAAYC,OAAZ;AAAqBK,IAAAA,IAAI,EAAEb,SAAS,CAACG;AAArC,KAAlB;AACA;AAED;;;;;;;;AAMO,SAASiC,WAAT,CAAqB7B,IAArB,EAAmCC,OAAnC,EAAkE;AACxE,SAAOF,WAAW,CAACC,IAAD,kCAAYC,OAAZ;AAAqBK,IAAAA,IAAI,EAAEb,SAAS,CAACI;AAArC,KAAlB;AACA","sourcesContent":["import Toastify from 'toastify-js'\n\nclass ToastType {\n\tstatic readonly ERROR = 'toast-error';\n\tstatic readonly WARNING = 'toast-warning';\n\tstatic readonly INFO = 'toast-info';\n\tstatic readonly SUCCESS = 'toast-success';\n\tstatic readonly PERMANENT = 'toast-error';\n}\n\nexport interface ToastOptions {\n\t/**\n\t * Defines the timeout after which the toast is closed. Set to 0 to have a persistent toast.\n\t */\n\ttimeout?: number\n\n\t/**\n\t * Set to true to allow HTML content inside of the toast text\n\t * @default false\n\t */\n\tisHTML?: Boolean\n\n\t/**\n\t * Set a type of {ToastType} to style the modal\n\t */\n\ttype?: ToastType\n\n\t/**\n\t * Provide a function that is called after the toast is removed\n\t */\n\tonRemove?: Function\n\n\t/**\n\t * Provide a function that is called when the toast is clicked\n\t */\n\tonClick?: Function\n\n\t/**\n\t * Make the toast closable\n\t */\n\tclose?: Boolean\n\n\t/**\n\t * Specify the element to attach the toast element to (for testing)\n\t */\n\tselector?: string\n}\n\n/**\n * Show a toast message\n *\n * @param text Message to be shown in the toast, any HTML is removed by default\n * @param options\n */\nexport function showMessage(text: string, options?: ToastOptions): Toast {\n\toptions = Object.assign({\n\t\ttimeout: 7,\n\t\tisHTML: false,\n\t\ttype: undefined,\n\t\t// An undefined selector defaults to the body element\n\t\tselector: undefined,\n\t\tonRemove: () => { },\n\t\tonClick: () => { },\n\t\tclose: true\n\t}, options)\n\tif (!options.isHTML) {\n\t\t// fime mae sure that text is extracted\n\t\tconst element = document.createElement('div')\n\t\telement.innerHTML = text\n\t\ttext = element.innerText\n\t}\n\tlet classes = options.type ?? ''\n\n\tconst toast = Toastify({\n\t\ttext: text,\n\t\tduration: (options.timeout === null || options.timeout === undefined) ? null : options.timeout * 1000,\n\t\tcallback: options.onRemove,\n\t\tonClick: options.onClick,\n\t\tclose: options.close,\n\t\tgravity: 'top',\n\t\tselector: options.selector,\n\t\tposition: 'right',\n\t\tbackgroundColor: '',\n\t\tclassName: 'toast ' + classes,\n\t})\n\ttoast.showToast()\n\treturn toast\n}\n\n/**\n * Show a toast message with error styling\n *\n * @param text Message to be shown in the toast, any HTML is removed by default\n * @param options\n */\nexport function showError(text: string, options?: ToastOptions): Toast {\n\treturn showMessage(text, { ...options, type: ToastType.ERROR })\n}\n\n/**\n * Show a toast message with warning styling\n *\n * @param text Message to be shown in the toast, any HTML is removed by default\n * @param options\n */\nexport function showWarning(text: string, options?: ToastOptions): Toast {\n\treturn showMessage(text, { ...options, type: ToastType.WARNING })\n}\n\n/**\n * Show a toast message with info styling\n *\n * @param text Message to be shown in the toast, any HTML is removed by default\n * @param options\n */\nexport function showInfo(text: string, options?: ToastOptions): Toast {\n\treturn showMessage(text, { ...options, type: ToastType.INFO })\n}\n\n/**\n * Show a toast message with success styling\n *\n * @param text Message to be shown in the toast, any HTML is removed by default\n * @param options\n */\nexport function showSuccess(text: string, options?: ToastOptions): Toast {\n\treturn showMessage(text, { ...options, type: ToastType.SUCCESS })\n}\n"],"file":"toast.js"}